/// <reference types="node" />
import { EventEmitter } from 'events';
import { Archetype } from '0g/dist-esm/Archetype';
import { ComponentInstanceFor, ComponentType, ComponentInstance } from '0g/dist-esm/Component';
import { Game } from '0g/dist-esm/Game';
export interface ArchetypeManagerEvents {
    archetypeCreated(archetype: Archetype): void;
    entityCreated(entityId: number): void;
    entityComponentAdded(entityId: number, component: ComponentInstance<any>): void;
    entityComponentRemoved(entityId: number, componentType: number): void;
    entityDestroyed(entityId: number): void;
}
export declare interface ArchetypeManager {
    on<U extends keyof ArchetypeManagerEvents>(ev: U, cb: ArchetypeManagerEvents[U]): this;
    off<U extends keyof ArchetypeManagerEvents>(ev: U, cb: ArchetypeManagerEvents[U]): this;
    emit<U extends keyof ArchetypeManagerEvents>(ev: U, ...args: Parameters<ArchetypeManagerEvents[U]>): boolean;
}
export declare class ArchetypeManager extends EventEmitter {
    private game;
    emptyId: string;
    entityLookup: (string | undefined)[];
    archetypes: Record<string, Archetype>;
    constructor(game: Game);
    createEntity(entityId: number): void;
    addComponent<T extends ComponentType<any>>(entityId: number, instance: ComponentInstanceFor<T>): void;
    removeComponent(entityId: number, componentType: number): any;
    destroyEntity(entityId: number): import("0g/dist-esm/Entity").Entity<ComponentType<any>, any>;
    getEntity(entityId: number): import("0g/dist-esm/Entity").Entity<ComponentType<any>, any> | null;
    private getOrCreate;
    private flipBit;
}
